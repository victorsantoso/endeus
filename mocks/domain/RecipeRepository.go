// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/victorsantoso/endeus/domain"
	entity "github.com/victorsantoso/endeus/entity"

	mock "github.com/stretchr/testify/mock"
)

// RecipeRepository is an autogenerated mock type for the RecipeRepository type
type RecipeRepository struct {
	mock.Mock
}

// CreateRecipe provides a mock function with given fields: ctx, recipe
func (_m *RecipeRepository) CreateRecipe(ctx context.Context, recipe *entity.Recipe) error {
	ret := _m.Called(ctx, recipe)

	if len(ret) == 0 {
		panic("no return value specified for CreateRecipe")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Recipe) error); ok {
		r0 = rf(ctx, recipe)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateRecipeCategory provides a mock function with given fields: ctx, categoryTag
func (_m *RecipeRepository) CreateRecipeCategory(ctx context.Context, categoryTag string) error {
	ret := _m.Called(ctx, categoryTag)

	if len(ret) == 0 {
		panic("no return value specified for CreateRecipeCategory")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, categoryTag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateRecipeRating provides a mock function with given fields: ctx, recipeId, userId, rating
func (_m *RecipeRepository) CreateRecipeRating(ctx context.Context, recipeId int64, userId int64, rating int) error {
	ret := _m.Called(ctx, recipeId, userId, rating)

	if len(ret) == 0 {
		panic("no return value specified for CreateRecipeRating")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int) error); ok {
		r0 = rf(ctx, recipeId, userId, rating)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRecipeById provides a mock function with given fields: ctx, recipeId
func (_m *RecipeRepository) DeleteRecipeById(ctx context.Context, recipeId int64) error {
	ret := _m.Called(ctx, recipeId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRecipeById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, recipeId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRecipeById provides a mock function with given fields: ctx, recipeId
func (_m *RecipeRepository) GetRecipeById(ctx context.Context, recipeId int64) (*entity.Recipe, error) {
	ret := _m.Called(ctx, recipeId)

	if len(ret) == 0 {
		panic("no return value specified for GetRecipeById")
	}

	var r0 *entity.Recipe
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*entity.Recipe, error)); ok {
		return rf(ctx, recipeId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *entity.Recipe); ok {
		r0 = rf(ctx, recipeId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Recipe)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, recipeId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecipeCategories provides a mock function with given fields: ctx
func (_m *RecipeRepository) GetRecipeCategories(ctx context.Context) ([]entity.RecipeCategory, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetRecipeCategories")
	}

	var r0 []entity.RecipeCategory
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]entity.RecipeCategory, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []entity.RecipeCategory); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.RecipeCategory)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecipeCategoryById provides a mock function with given fields: ctx, categoryId
func (_m *RecipeRepository) GetRecipeCategoryById(ctx context.Context, categoryId int64) (*entity.RecipeCategory, error) {
	ret := _m.Called(ctx, categoryId)

	if len(ret) == 0 {
		panic("no return value specified for GetRecipeCategoryById")
	}

	var r0 *entity.RecipeCategory
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*entity.RecipeCategory, error)); ok {
		return rf(ctx, categoryId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *entity.RecipeCategory); ok {
		r0 = rf(ctx, categoryId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.RecipeCategory)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, categoryId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecipeRatingSummary provides a mock function with given fields: ctx, recipeId
func (_m *RecipeRepository) GetRecipeRatingSummary(ctx context.Context, recipeId int64) (float64, int, error) {
	ret := _m.Called(ctx, recipeId)

	if len(ret) == 0 {
		panic("no return value specified for GetRecipeRatingSummary")
	}

	var r0 float64
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (float64, int, error)); ok {
		return rf(ctx, recipeId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) float64); ok {
		r0 = rf(ctx, recipeId)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) int); ok {
		r1 = rf(ctx, recipeId)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int64) error); ok {
		r2 = rf(ctx, recipeId)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetRecipes provides a mock function with given fields: ctx, getRecipesQueryFilter
func (_m *RecipeRepository) GetRecipes(ctx context.Context, getRecipesQueryFilter *domain.GetRecipesQueryFilter) ([]entity.Recipe, error) {
	ret := _m.Called(ctx, getRecipesQueryFilter)

	if len(ret) == 0 {
		panic("no return value specified for GetRecipes")
	}

	var r0 []entity.Recipe
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetRecipesQueryFilter) ([]entity.Recipe, error)); ok {
		return rf(ctx, getRecipesQueryFilter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetRecipesQueryFilter) []entity.Recipe); ok {
		r0 = rf(ctx, getRecipesQueryFilter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Recipe)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetRecipesQueryFilter) error); ok {
		r1 = rf(ctx, getRecipesQueryFilter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRecipeById provides a mock function with given fields: ctx, recipeId, updateRecipeByIdQueryFilter
func (_m *RecipeRepository) UpdateRecipeById(ctx context.Context, recipeId int64, updateRecipeByIdQueryFilter *domain.UpdateRecipeByIdQueryFilter) error {
	ret := _m.Called(ctx, recipeId, updateRecipeByIdQueryFilter)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRecipeById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, *domain.UpdateRecipeByIdQueryFilter) error); ok {
		r0 = rf(ctx, recipeId, updateRecipeByIdQueryFilter)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRecipeRepository creates a new instance of RecipeRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRecipeRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *RecipeRepository {
	mock := &RecipeRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
